"use client"

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { ExploitStats } from "@/lib/types"
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
} from "recharts"

interface ExploitsTimelineProps {
  stats: ExploitStats
}

export function ExploitsTimeline({ stats }: ExploitsTimelineProps) {
  const data = Object.entries(stats.exploitsByMonth)
    .sort(([a], [b]) => a.localeCompare(b))
    .map(([month, count]) => {
      const [year, monthNum] = month.split("-")
      const date = new Date(Number(year), Number(monthNum) - 1)
      return {
        month: date.toLocaleString("default", { month: "short", year: "2-digit" }),
        count,
      }
    })

  
  const filledData = (() => {
    if (data.length <= 1) return data

    const result = [...data]
    const dates = data.map(d => {
      const [monthStr, yearStr] = d.month.split(" ")
      return new Date(2000 + parseInt(yearStr), ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"].indexOf(monthStr))
    })

    const minDate = new Date(Math.min(...dates.map(d => d.getTime())))
    const maxDate = new Date(Math.max(...dates.map(d => d.getTime())))

    const currentDate = new Date(minDate)
    while (currentDate < maxDate) {
      const monthStr = currentDate.toLocaleString("default", { month: "short" })
      const yearStr = currentDate.toLocaleString("default", { year: "2-digit" })
      const monthYear = `${monthStr} ${yearStr}`
      
      if (!result.some(d => d.month === monthYear)) {
       
        const insertIndex = result.findIndex(d => {
          const [existingMonth, existingYear] = d.month.split(" ")
          const existingDate = new Date(2000 + parseInt(existingYear), ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"].indexOf(existingMonth))
          return existingDate > currentDate
        })
        
        if (insertIndex !== -1) {
          result.splice(insertIndex, 0, { month: monthYear, count: 0 })
        } else {
          result.push({ month: monthYear, count: 0 })
        }
      }
      
      
      currentDate.setMonth(currentDate.getMonth() + 1)
    }
    
    
    return result.sort((a, b) => {
      const [monthA, yearA] = a.month.split(" ")
      const [monthB, yearB] = b.month.split(" ")
      
      const dateA = new Date(2000 + parseInt(yearA), ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"].indexOf(monthA))
      const dateB = new Date(2000 + parseInt(yearB), ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"].indexOf(monthB))
      
      return dateA.getTime() - dateB.getTime()
    })
  })()

  return (
    <Card className="col-span-2">
      <CardHeader>
        <CardTitle>Exploits Timeline</CardTitle>
      </CardHeader>
      <CardContent className="h-[300px]">
        <ResponsiveContainer width="100%" height="100%">
          <LineChart
            data={filledData}
            margin={{
              top: 5,
              right: 30,
              left: 20,
              bottom: 25,
            }}
          >
            <CartesianGrid strokeDasharray="3 3" stroke="hsl(var(--border))" />
            <XAxis 
              dataKey="month" 
              tick={{ fontSize: 12 }} 
              stroke="hsl(var(--muted-foreground))" 
              angle={-45}
              textAnchor="end"
              height={60}
            />
            <YAxis 
              allowDecimals={false}
              stroke="hsl(var(--muted-foreground))"
            />
            <Tooltip 
              contentStyle={{ 
                background: 'hsl(var(--card))', 
                border: '1px solid hsl(var(--border))',
                borderRadius: 'var(--radius)',
              }}
              formatter={(value: number) => [`${value} exploits`, 'Count']}
            />
            <Line
              type="monotone"
              dataKey="count"
              stroke="hsl(var(--chart-1))"
              activeDot={{ r: 8 }}
              strokeWidth={2}
              dot={{ r: 4, fill: "hsl(var(--chart-1))" }}
              animationDuration={1500}
            />
          </LineChart>
        </ResponsiveContainer>
      </CardContent>
    </Card>
  )
}