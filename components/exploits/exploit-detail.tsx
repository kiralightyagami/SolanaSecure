import { Exploit } from "@/lib/types"
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { formatCurrency } from "@/lib/utils"
import {
  AlertTriangle, 
  Calendar, 
  Clock, 
  DollarSign, 
  ExternalLink, 
  FileText, 
  Hash, 
  LayoutList
} from "lucide-react"
import { Button } from "@/components/ui/button"
import { Separator } from "@/components/ui/separator"
import Link from "next/link"
import { Timeline } from "@/components/exploits/timeline"

interface ExploitDetailProps {
  exploit: Exploit
}

export function ExploitDetail({ exploit }: ExploitDetailProps) {
  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "Critical":
        return "bg-destructive text-destructive-foreground"
      case "High":
        return "bg-chart-5 text-white"
      case "Medium":
        return "bg-chart-4 text-black"
      case "Low":
        return "bg-chart-2 text-white"
      default:
        return "bg-muted text-muted-foreground"
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case "Confirmed":
        return "bg-destructive text-destructive-foreground"
      case "Suspected":
        return "bg-yellow-500 text-black"
      case "Resolved":
        return "bg-green-600 text-white"
      case "Funds Recovered":
        return "bg-green-700 text-white"
      case "Ongoing Investigation":
        return "bg-blue-600 text-white"
      default:
        return "bg-muted text-muted-foreground"
    }
  }

  return (
    <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
      <div className="lg:col-span-2 space-y-6">
        <Card>
          <CardHeader>
            <div className="flex justify-between items-start">
              <div>
                <CardTitle className="text-2xl mb-2">{exploit.name}</CardTitle>
                <CardDescription className="text-base">{exploit.projectName}</CardDescription>
              </div>
              <div className="flex gap-2 flex-wrap justify-end">
                <Badge className={getSeverityColor(exploit.severity)}>
                  {exploit.severity}
                </Badge>
                <Badge className={getStatusColor(exploit.status)}>
                  {exploit.status}
                </Badge>
              </div>
            </div>
          </CardHeader>
          <CardContent>
            <div className="flex flex-wrap items-center gap-x-6 gap-y-2 mb-6 text-sm text-muted-foreground">
              <div className="flex items-center gap-2">
                <Calendar className="h-4 w-4" />
                <span>
                  {new Date(exploit.date).toLocaleDateString("en-US", {
                    year: "numeric",
                    month: "long",
                    day: "numeric",
                  })}
                </span>
              </div>
              <div className="flex items-center gap-2">
                <AlertTriangle className="h-4 w-4 text-chart-5" />
                <span>{exploit.type}</span>
              </div>
              <div className="flex items-center gap-2">
                <DollarSign className="h-4 w-4 text-destructive" />
                <span>{formatCurrency(exploit.fundsLost)}</span>
              </div>
            </div>
            
            <h3 className="text-lg font-semibold mb-2">Description</h3>
            <p className="mb-6">{exploit.description}</p>
            
            <h3 className="text-lg font-semibold mb-2">Technical Details</h3>
            <p className="mb-6">{exploit.technicalDetails || "No technical details available."}</p>
            
            {exploit.tags && exploit.tags.length > 0 && (
              <div className="flex flex-wrap gap-2 mb-6">
                {exploit.tags.map((tag) => (
                  <Badge key={tag} variant="outline">
                    {tag}
                  </Badge>
                ))}
              </div>
            )}
            
            {exploit.postMortem && (
              <div className="mt-4">
                <Button variant="outline" size="sm" asChild>
                  <Link href={exploit.postMortem} target="_blank" rel="noopener noreferrer">
                    Post-Mortem <ExternalLink className="ml-2 h-3 w-3" />
                  </Link>
                </Button>
              </div>
            )}
          </CardContent>
        </Card>
        
        {exploit.timeline && exploit.timeline.length > 0 && (
          <Card>
            <CardHeader>
              <CardTitle className="text-xl">Exploit Timeline</CardTitle>
            </CardHeader>
            <CardContent>
              <Timeline events={exploit.timeline} />
            </CardContent>
          </Card>
        )}
      </div>
      
      <div className="space-y-6">
        <Card>
          <CardHeader>
            <CardTitle className="text-xl">On-Chain Details</CardTitle>
          </CardHeader>
          <CardContent>
            {exploit.transactionHash ? (
              <div className="space-y-4">
                <div>
                  <div className="text-sm font-medium text-muted-foreground mb-1 flex items-center">
                    <Hash className="h-4 w-4 mr-2" />
                    Transaction Hash
                  </div>
                  <div className="text-sm font-mono bg-muted p-2 rounded-md break-all">
                    <Link href={`https://explorer.solana.com/tx/${exploit.transactionHash}`} target="_blank" rel="noopener noreferrer" className="hover:text-primary">
                      {exploit.transactionHash}
                    </Link>
                  </div>
                </div>
                {exploit.exploitAddress && (
                  <div>
                    <div className="text-sm font-medium text-muted-foreground mb-1 flex items-center">
                      <AlertTriangle className="h-4 w-4 mr-2" />
                      Exploit Address
                    </div>
                    <div className="text-sm font-mono bg-muted p-2 rounded-md break-all">
                      <Link href={`https://explorer.solana.com/address/${exploit.exploitAddress}`} target="_blank" rel="noopener noreferrer" className="hover:text-primary">
                        {exploit.exploitAddress}
                      </Link>
                    </div>
                  </div>
                )}
                <div className="pt-2">
                  <Button variant="outline" size="sm" asChild className="w-full">
                    <Link href={`https://explorer.solana.com/tx/${exploit.transactionHash}`} target="_blank" rel="noopener noreferrer">
                      View on Solana Explorer <ExternalLink className="ml-2 h-3 w-3" />
                    </Link>
                  </Button>
                </div>
              </div>
            ) : (
              <div className="text-muted-foreground text-sm">
                No on-chain transaction details available.
              </div>
            )}
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader>
            <CardTitle className="text-xl">Similar Exploits</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="flex items-center">
                <div className="w-2 h-2 rounded-full bg-destructive mr-3"></div>
                <div className="text-sm hover:text-primary">
                  <Link href="/exploits/3">Slope Wallet Private Key Leak</Link>
                </div>
              </div>
              <div className="flex items-center">
                <div className="w-2 h-2 rounded-full bg-chart-5 mr-3"></div>
                <div className="text-sm hover:text-primary">
                  <Link href="/exploits/4">Wormhole Bridge Exploit</Link>
                </div>
              </div>
              <div className="flex items-center">
                <div className="w-2 h-2 rounded-full bg-chart-2 mr-3"></div>
                <div className="text-sm hover:text-primary">
                  <Link href="/exploits/5">Cashio Infinite Mint Exploit</Link>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader>
            <CardTitle className="text-xl">Protection Resources</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="flex items-start">
                <FileText className="h-4 w-4 mr-3 mt-0.5 text-primary" />
                <div>
                  <Link href="/resources" className="text-sm font-medium hover:text-primary">
                    Smart Contract Security Checklist
                  </Link>
                  <p className="text-xs text-muted-foreground">
                    Essential checks for contract developers
                  </p>
                </div>
              </div>
              <div className="flex items-start">
                <LayoutList className="h-4 w-4 mr-3 mt-0.5 text-primary" />
                <div>
                  <Link href="/resources" className="text-sm font-medium hover:text-primary">
                    Oracle Attack Prevention Guide
                  </Link>
                  <p className="text-xs text-muted-foreground">
                    Learn to prevent oracle manipulation
                  </p>
                </div>
              </div>
              <div className="flex items-start">
                <Clock className="h-4 w-4 mr-3 mt-0.5 text-primary" />
                <div>
                  <Link href="/resources" className="text-sm font-medium hover:text-primary">
                    Emergency Response Playbook
                  </Link>
                  <p className="text-xs text-muted-foreground">
                    Quick response guide for projects
                  </p>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}