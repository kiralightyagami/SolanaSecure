"use client"

import { useState } from "react"
import { Check, ChevronsUpDown } from "lucide-react"
import { Button } from "@/components/ui/button"
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
} from "@/components/ui/command"
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover"
import { cn } from "@/lib/utils"
import { ExploitType, Severity, ExploitStatus } from "@/lib/types"

interface ExploitFilterProps {
  title: string
  options: string[]
  value: string
  onChange: (value: string) => void
}

export function ExploitFilter({
  title,
  options,
  value,
  onChange,
}: ExploitFilterProps) {
  const [open, setOpen] = useState(false)

  return (
    <Popover open={open} onOpenChange={setOpen}>
      <PopoverTrigger asChild>
        <Button
          variant="outline"
          role="combobox"
          aria-expanded={open}
          className="justify-between min-w-[150px]"
        >
          {value ? value : `All ${title}`}
          <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-[200px] p-0">
        <Command>
          <CommandInput placeholder={`Search ${title.toLowerCase()}...`} />
          <CommandEmpty>No {title.toLowerCase()} found.</CommandEmpty>
          <CommandGroup>
            <CommandItem
              value="all"
              onSelect={() => {
                onChange("")
                setOpen(false)
              }}
            >
              <Check
                className={cn(
                  "mr-2 h-4 w-4",
                  !value ? "opacity-100" : "opacity-0"
                )}
              />
              All {title}
            </CommandItem>
            {options.map((option) => (
              <CommandItem
                key={option}
                value={option}
                onSelect={() => {
                  onChange(option)
                  setOpen(false)
                }}
              >
                <Check
                  className={cn(
                    "mr-2 h-4 w-4",
                    value === option ? "opacity-100" : "opacity-0"
                  )}
                />
                {option}
              </CommandItem>
            ))}
          </CommandGroup>
        </Command>
      </PopoverContent>
    </Popover>
  )
}

interface ExploitFiltersProps {
  onFilterChange: (filters: {
    type: string
    severity: string
    status: string
  }) => void
  filters: {
    type: string
    severity: string
    status: string
  }
}

export function ExploitFilters({ onFilterChange, filters }: ExploitFiltersProps) {
 
  const types: ExploitType[] = [
    "Smart Contract",
    "Flash Loan",
    "Oracle Manipulation",
    "Access Control",
    "Logic Error",
    "Admin Key Compromise",
    "Frontend Attack",
    "Rug Pull",
    "Social Engineering",
    "Other",
  ]

  const severities: Severity[] = ["Critical", "High", "Medium", "Low"]

  const statuses: ExploitStatus[] = [
    "Confirmed",
    "Suspected",
    "Resolved",
    "Funds Recovered",
    "Ongoing Investigation",
  ]

  return (
    <div className="flex flex-wrap gap-2">
      <ExploitFilter
        title="Types"
        options={types}
        value={filters.type}
        onChange={(value) => onFilterChange({ ...filters, type: value })}
      />
      <ExploitFilter
        title="Severities"
        options={severities}
        value={filters.severity}
        onChange={(value) => onFilterChange({ ...filters, severity: value })}
      />
      <ExploitFilter
        title="Statuses"
        options={statuses}
        value={filters.status}
        onChange={(value) => onFilterChange({ ...filters, status: value })}
      />
    </div>
  )
}